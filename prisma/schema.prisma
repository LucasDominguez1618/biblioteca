// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Role {
  id    String @id @default(uuid())
  name  String @unique
  users User[]
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  lastName  String
  email     String   @unique
  password  String
  active    Boolean  @default(true)
  roleId    String
  role      Role     @relation(fields: [roleId], references: [id])

  // Relationships
  books    Book[]    @relation("BooksCreatedByUser")
  rentals  Rental[]  @relation("RentalsByUser")
  student  Student?
}

model Student {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  studentId    String   @unique
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])
  enrollmentDate DateTime

  // Relationships
  rentals     Rental[]
}

model Book {
  id                String   @id @default(uuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  title             String
  publicationDate   DateTime
  authorId          String
  publisherId       String
  categoryId        String
  createdById       String

  // Relationships
  author            Author    @relation(fields: [authorId], references: [id])
  publisher         Publisher @relation(fields: [publisherId], references: [id])
  category          Category  @relation(fields: [categoryId], references: [id])
  createdBy         User      @relation("BooksCreatedByUser", fields: [createdById], references: [id])
  rentals           Rental[]  @relation("RentalsByBook")
}

model Rental {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  bookId     String
  userId     String
  studentId  String
  rentDate   DateTime
  returnDate DateTime

  // Relationships
  book       Book     @relation("RentalsByBook", fields: [bookId], references: [id])
  user       User     @relation("RentalsByUser", fields: [userId], references: [id])
  student    Student  @relation(fields: [studentId], references: [id])
}

model Author {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  // Relationships
  books     Book[]
}

model Category {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  // Relationships
  books     Book[]
}

model Publisher {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  // Relationships
  books     Book[]
}